plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.sonarqube' version '6.0.1.5171'
    id "checkstyle"
    id 'jacoco'
    id "org.owasp.dependencycheck" version '8.0.1'
}

sonar {
  properties {
      property "sonar.java.binaries", "build/classes/java/main"
      property "sonar.projectKey", "photo_service_419206ae-7dd2-4042-ad53-3469fc1ce505"
      property "sonar.projectName", "photo_service"
      property "sonar.qualitygate.wait", true
      property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
      property "sonar.coverage.exclusions", "**/messages/**, **/entity/**, **/exception/**, **/configuration/**, " +
              "**/dto/**, **/responses/**, **/DemoApplication.java,  **/mapper/**,  " +
              "**/client/**, **/service/JwtService.java, **/util/**"
      property "sonar.dependencyCheck.reportPath", "build/reports/dependency-check/dependency-check-report.json"
      property "sonar.dependencyCheck.htmlReportPath", "build/reports/dependency-check/dependency-check-report.html"
  }
}

group = 'org.gordeser'
version = '0.0.1'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.2.0'
    implementation 'io.swagger.core.v3:swagger-annotations:2.1.10'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'com.cloudinary:cloudinary-http44:1.31.0'
    jacocoAgent "org.jacoco:org.jacoco.agent:+"
    jacocoAnt "org.jacoco:org.jacoco.ant:+"
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:elasticsearch'
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
    implementation 'org.flywaydb:flyway-core:9.22.3'
}

dependencyCheck {
    format = 'HTML'
    outputDirectory = "build/reports/dependency-check"
}

checkstyle {
    toolVersion = "10.12.4"
    ignoreFailures = false
    configFile = file("config/checkstyle/checkstyle.xml")
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
    }
}

tasks.test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    jacoco {
        excludes = ['jdk.internal.*', 'java.util.*']
    }
    onlyIf { gradle.startParameter.taskNames.any { it.contains('test') } }
    jvmArgs = ['-Xmx512m']
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}